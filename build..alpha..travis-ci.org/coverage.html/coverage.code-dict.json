{"/home/travis/build/npmtest/node-npmtest-sonos/test.js":"/* istanbul instrument in package npmtest_sonos */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sonos/lib.npmtest_sonos.js":"/* istanbul instrument in package npmtest_sonos */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sonos = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sonos = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sonos/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sonos && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sonos */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sonos\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sonos.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sonos.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sonos.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sonos.__dirname + '/lib.npmtest_sonos.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sonos/node_modules/sonos/index.js":"module.exports = require('./lib/sonos')\n","/home/travis/build/npmtest/node-npmtest-sonos/node_modules/sonos/lib/sonos.js":"/**\n * Constants\n */\nvar TRANSPORT_ENDPOINT = '/MediaRenderer/AVTransport/Control'\nvar RENDERING_ENDPOINT = '/MediaRenderer/RenderingControl/Control'\nvar DEVICE_ENDPOINT = '/DeviceProperties/Control'\n\n/**\n * Dependencies\n */\nvar util = require('util')\nvar EventEmitter = require('events').EventEmitter\nvar dgram = require('dgram')\nvar request = require('request')\nvar xml2js = require('xml2js')\nvar debug = require('debug')('sonos')\nvar _ = require('underscore')\n\n/**\n * Services\n */\nvar Services = {\n  AlarmClock: require('./services/AlarmClock'),\n  AudioIn: require('./services/AudioIn'),\n  AVTransport: require('./services/AVTransport'),\n  ContentDirectory: require('./services/ContentDirectory'),\n  DeviceProperties: require('./services/DeviceProperties'),\n  GroupManagement: require('./services/GroupManagement'),\n  GroupRenderingControl: require('./services/GroupRenderingControl'),\n  MusicServices: require('./services/MusicServices'),\n  RenderingControl: require('./services/RenderingControl'),\n  Service: require('./services/Service'),\n  SystemProperties: require('./services/SystemProperties'),\n  ZoneGroupTopology: require('./services/ZoneGroupTopology')\n}\n\n/**\n * Helpers\n */\n\n/**\n * Wrap in UPnP Envelope\n * @param  {String} body\n * @return {String}\n */\nvar withinEnvelope = function (body) {\n  return ['<?xml version=\"1.0\" encoding=\"utf-8\"?>',\n    '<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">',\n    '<s:Body>' + body + '</s:Body>',\n    '</s:Envelope>'].join('')\n}\n\n/**\n * Encodes characters not allowed within html/xml tags\n * @param  {String} str\n * @return {String}\n */\nvar htmlEntities = function (str) {\n  return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;')\n}\n\n/**\n * Creates object with uri and metadata from Spotify track uri\n * @param  {String} uri\n * @return {Object} options       {uri: Spotify uri, metadata: metadata}\n */\nvar optionsFromSpotifyUri = function (uri, title) {\n  var spotifyIds = uri.split(':')\n  if (Array.isArray(spotifyIds) && spotifyIds.length < 3) return uri\n  var spotifyUri = uri.replace(/:/g, '%3a')\n  var meta = '<DIDL-Lite xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:upnp=\"urn:schemas-upnp-org:metadata-1-0/upnp/\" xmlns:r=\"urn:schemas-rinconnetworks-com:metadata-1-0/\" xmlns=\"urn:schemas-upnp-org:metadata-1-0/DIDL-Lite/\"><item id=\"##SPOTIFYURI##\" restricted=\"true\"><dc:title>##RESOURCETITLE##</dc:title><upnp:class>##SPOTIFYTYPE##</upnp:class><desc id=\"cdudn\" nameSpace=\"urn:schemas-rinconnetworks-com:metadata-1-0/\">SA_RINCON3079_X_#Svc3079-0-Token</desc></item></DIDL-Lite>'\n  if (uri.startsWith('spotify:track:')) {\n    return {\n      uri: spotifyUri,\n      metadata: meta.replace('##SPOTIFYURI##', '00032020' + spotifyUri).replace('##RESOURCETITLE##', '').replace('##SPOTIFYTYPE##', 'object.item.audioItem.musicTrack')\n    }\n  } else if (uri.startsWith('spotify:album:')) {\n    return {\n      uri: 'x-rincon-cpcontainer:0004206c' + spotifyUri,\n      metadata: meta.replace('##SPOTIFYURI##', '0004206c' + spotifyUri).replace('##RESOURCETITLE##', '').replace('##SPOTIFYTYPE##', 'object.container.album.musicAlbum')\n    }\n  } else if (uri.startsWith('spotify:artistTopTracks:')) {\n    return {\n      uri: 'x-rincon-cpcontainer:000e206c' + spotifyUri,\n      metadata: meta.replace('##SPOTIFYURI##', '000e206c' + spotifyUri).replace('##RESOURCETITLE##', '').replace('##SPOTIFYTYPE##', 'object.container.playlistContainer')\n    }\n  } else if (uri.startsWith('spotify:user:')) {\n    return {\n      uri: 'x-rincon-cpcontainer:0006206c' + spotifyUri,\n      metadata: meta.replace('##SPOTIFYURI##', '0006206c' + spotifyUri).replace('##RESOURCETITLE##', '').replace('##SPOTIFYTYPE##', 'object.container.playlistContainer')\n    }\n  } else if (uri.startsWith('spotify:artistRadio:')) {\n    var radioTitle = (title !== undefined) ? title : 'Artist Radio'\n    return {\n      uri: spotifyUri,\n      metadata: '<DIDL-Lite xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:upnp=\"urn:schemas-upnp-org:metadata-1-0/upnp/\" xmlns:r=\"urn:schemas-rinconnetworks-com:metadata-1-0/\" xmlns=\"urn:schemas-upnp-org:metadata-1-0/DIDL-Lite/\"><item id=\"000c206c' + spotifyUri + '\" restricted=\"true\"><dc:title>' + radioTitle + '</dc:title><upnp:class>object.item.audioItem.audioBroadcast.#artistRadio</upnp:class><desc id=\"cdudn\" nameSpace=\"urn:schemas-rinconnetworks-com:metadata-1-0/\">SA_RINCON3079_X_#Svc3079-0-Token</desc></item></DIDL-Lite>'\n    }\n  } else {\n    return uri\n  }\n}\n\n/**\n * Sonos \"Class\"\n * @param {String} host IP/DNS\n * @param {Number} port\n */\nvar Sonos = function Sonos (host, port, options) {\n  this.host = host\n  this.port = port || 1400\n  this.options = options || {}\n  if (!this.options.endpoints) this.options.endpoints = {}\n  if (!this.options.endpoints.transport) this.options.endpoints.transport = TRANSPORT_ENDPOINT\n  if (!this.options.endpoints.rendering) this.options.endpoints.rendering = RENDERING_ENDPOINT\n  if (!this.options.endpoints.device) this.options.endpoints.device = DEVICE_ENDPOINT\n}\n\n/**\n * UPnP HTTP Request\n * @param  {String}   endpoint    HTTP Path\n * @param  {String}   action      UPnP Call/Function/Action\n * @param  {String}   body\n * @param  {String}   responseTag Expected Response Container XML Tag\n * @param  {Function} callback    (err, data)\n */\nSonos.prototype.request = function (endpoint, action, body, responseTag, callback) {\n  debug('Sonos.request(%j, %j, %j, %j, %j)', endpoint, action, body, responseTag, callback)\n  request({\n    uri: 'http://' + this.host + ':' + this.port + endpoint,\n    method: 'POST',\n    headers: {\n      'SOAPAction': action,\n      'Content-type': 'text/xml; charset=utf8'\n    },\n    body: withinEnvelope(body)\n  }, function (err, res, body) {\n    if (err) return callback(err)\n    if (res.statusCode !== 200) {\n      return callback(new Error('HTTP response code ' + res.statusCode + ' for ' + action))\n    }\n    (new xml2js.Parser()).parseString(body, function (err, json) {\n      if (err) return callback(err)\n      if ((!json) || (!json['s:Envelope']) || (!util.isArray(json['s:Envelope']['s:Body']))) {\n        return callback(new Error('Invalid response for ' + action + ': ' + JSON.stringify(json)))\n      }\n      if (typeof json['s:Envelope']['s:Body'][0]['s:Fault'] !== 'undefined') {\n        return callback(json['s:Envelope']['s:Body'][0]['s:Fault'])\n      }\n      return callback(null, json['s:Envelope']['s:Body'][0][responseTag])\n    })\n  })\n}\n\n/**\n * Get Music Library Information\n * @param  {String}   searchType  Choice - artists, albumArtists, albums, genres, composers, tracks, playlists, share\n * @param  {Object}   options     Optional - default {start: 0, total: 100}\n * @param  {Function} callback (err, result) result - {returned: {String}, total: {String}, items:[{title:{String}, uri: {String}}]}\n */\nSonos.prototype.getMusicLibrary = function (searchType, options, callback) {\n  this.searchMusicLibrary(searchType, null, options, callback)\n}\n\n/**\n * Get Music Library Information\n * @param  {String}   searchType  Choice - artists, albumArtists, albums, genres, composers, tracks, playlists, share\n * @param  {String}   searchTerm  Optional - search term to search for\n * @param  {Object}   options     Optional - default {start: 0, total: 100}\n * @param  {Function} callback (err, result) result - {returned: {String}, total: {String}, items:[{title:{String}, uri: {String}}]}\n */\nSonos.prototype.searchMusicLibrary = function (searchType, searchTerm, options, callback) {\n  var self = this\n  var searches = {\n    'artists': 'A:ARTIST',\n    'albumArtists': 'A:ALBUMARTIST',\n    'albums': 'A:ALBUM',\n    'genres': 'A:GENRE',\n    'composers': 'A:COMPOSER',\n    'tracks': 'A:TRACKS',\n    'playlists': 'A:PLAYLISTS',\n    'sonos_playlists': 'SQ:',\n    'share': 'S:'\n  }\n  var defaultOptions = {\n    BrowseFlag: 'BrowseDirectChildren',\n    Filter: '*',\n    StartingIndex: '0',\n    RequestedCount: '100',\n    SortCriteria: ''\n  }\n  searches = searches[searchType]\n\n  var opensearch = (!searchTerm) || (searchTerm === '')\n  if (!opensearch) searches = searches.concat(':' + searchTerm)\n\n  var opts = {\n    ObjectID: searches\n  }\n  if (options.start !== undefined) opts.StartingIndex = options.start\n  if (options.total !== undefined) opts.RequestedCount = options.total\n  opts = _.extend(defaultOptions, opts)\n  var contentDirectory = new Services.ContentDirectory(this.host, this.port)\n  return contentDirectory.Browse(opts, function (err, data) {\n    if (err) return callback(err)\n    return (new xml2js.Parser()).parseString(data.Result, function (err, didl) {\n      if (err) return callback(err, data)\n      var items = []\n      if ((!didl) || (!didl['DIDL-Lite'])) {\n        return callback(new Error('Cannot parse DIDTL result'), data)\n      }\n      var resultcontainer = opensearch ? didl['DIDL-Lite'].container : didl['DIDL-Lite'].item\n      if (!util.isArray(resultcontainer)) {\n        return callback(new Error('Cannot parse DIDTL result'), data)\n      }\n      _.each(resultcontainer, function (item) {\n        var albumArtURL = null\n        if (util.isArray(item['upnp:albumArtURI'])) {\n          if (item['upnp:albumArtURI'][0].indexOf('http') !== -1) {\n            albumArtURL = item['upnp:albumArtURI'][0]\n          } else {\n            albumArtURL = 'http://' + self.host + ':' + self.port + item['upnp:albumArtURI'][0]\n          }\n        }\n        items.push({\n          'title': util.isArray(item['dc:title']) ? item['dc:title'][0] : null,\n          'artist': util.isArray(item['dc:creator']) ? item['dc:creator'][0] : null,\n          'albumArtURL': albumArtURL,\n          'album': util.isArray(item['upnp:album']) ? item['upnp:album'][0] : null,\n          'uri': util.isArray(item.res) ? item.res[0]._ : null\n        })\n      })\n      var result = {\n        returned: data.NumberReturned,\n        total: data.TotalMatches,\n        items: items\n      }\n      return callback(null, result)\n    })\n  })\n}\n\n/**\n * Get Current Track\n * @param  {Function} callback (err, track)\n */\nSonos.prototype.currentTrack = function (callback) {\n  debug('Sonos.currentTrack(' + ((callback) ? 'callback' : '') + ')')\n  var self = this\n  var action = '\"urn:schemas-upnp-org:service:AVTransport:1#GetPositionInfo\"'\n  var body = '<u:GetPositionInfo xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID><Channel>Master</Channel></u:GetPositionInfo>'\n  var responseTag = 'u:GetPositionInfoResponse'\n  return this.request(this.options.endpoints.transport, action, body, responseTag, function (err, data) {\n    if (err) return callback(err)\n    if ((!util.isArray(data)) || (data.length < 1)) return {}\n    var metadata = data[0].TrackMetaData\n    var position = (parseInt(data[0].RelTime[0].split(':')[0], 10) * 60 * 60) +\n      (parseInt(data[0].RelTime[0].split(':')[1], 10) * 60) +\n      parseInt(data[0].RelTime[0].split(':')[2], 10)\n    var duration = (parseInt(data[0].TrackDuration[0].split(':')[0], 10) * 60 * 60) +\n      (parseInt(data[0].TrackDuration[0].split(':')[1], 10) * 60) +\n      parseInt(data[0].TrackDuration[0].split(':')[2], 10)\n    var trackUri = data[0].TrackURI ? data[0].TrackURI[0] : null\n    if ((metadata) && (metadata[0].length > 0) && metadata[0] !== 'NOT_IMPLEMENTED') {\n      return (new xml2js.Parser()).parseString(metadata, function (err, data) {\n        if (err) {\n          return callback(err, data)\n        }\n        var track = self.parseDIDL(data)\n        track.position = position\n        track.duration = duration\n        track.albumArtURL = !track.albumArtURI ? null\n          : (track.albumArtURI.indexOf('http') !== -1) ? track.albumArtURI\n            : 'http://' + self.host + ':' + self.port + track.albumArtURI\n        if (trackUri) track.uri = trackUri\n        return callback(null, track)\n      })\n    } else {\n      var track = { position: position, duration: duration }\n      if (data[0].TrackURI) track.uri = data[0].TrackURI[0]\n      return callback(null, track)\n    }\n  })\n}\n\n/**\n * Parse DIDL into track structure\n * @param  {String} didl\n * @return {object}\n */\nSonos.prototype.parseDIDL = function (didl) {\n  if ((!didl) || (!didl['DIDL-Lite']) || (!util.isArray(didl['DIDL-Lite'].item)) || (!didl['DIDL-Lite'].item[0])) return {}\n  var item = didl['DIDL-Lite'].item[0]\n  return {\n    title: util.isArray(item['dc:title']) ? item['dc:title'][0] : null,\n    artist: util.isArray(item['dc:creator']) ? item['dc:creator'][0] : null,\n    album: util.isArray(item['upnp:album']) ? item['upnp:album'][0] : null,\n    albumArtURI: util.isArray(item['upnp:albumArtURI']) ? item['upnp:albumArtURI'][0] : null\n  }\n}\n\n/**\n * Get Current Volume\n * @param  {Function} callback (err, volume)\n */\nSonos.prototype.getVolume = function (callback) {\n  debug('Sonos.getVolume(' + ((callback) ? 'callback' : '') + ')')\n  var action = '\"urn:schemas-upnp-org:service:RenderingControl:1#GetVolume\"'\n  var body = '<u:GetVolume xmlns:u=\"urn:schemas-upnp-org:service:RenderingControl:1\"><InstanceID>0</InstanceID><Channel>Master</Channel></u:GetVolume>'\n  var responseTag = 'u:GetVolumeResponse'\n  return this.request(this.options.endpoints.rendering, action, body, responseTag, function (err, data) {\n    if (err) return callback(err)\n    callback(null, parseInt(data[0].CurrentVolume[0], 10))\n  })\n}\n\n/**\n * Get Current Muted\n * @param  {Function} callback (err, muted)\n */\nSonos.prototype.getMuted = function (callback) {\n  debug('Sonos.getMuted(' + ((callback) ? 'callback' : '') + ')')\n  var action = '\"urn:schemas-upnp-org:service:RenderingControl:1#GetMute\"'\n  var body = '<u:GetMute xmlns:u=\"urn:schemas-upnp-org:service:RenderingControl:1\"><InstanceID>0</InstanceID><Channel>Master</Channel></u:GetMute>'\n  var responseTag = 'u:GetMuteResponse'\n  return this.request(this.options.endpoints.rendering, action, body, responseTag, function (err, data) {\n    if (err) return callback(err)\n    callback(null, !!parseInt(data[0].CurrentMute[0], 10))\n  })\n}\n\n/**\n * Resumes Queue or Plays Provided URI\n * @param  {String|Object}   uri      Optional - URI to a Audio Stream or Object with play options\n * @param  {Function} callback (err, playing)\n */\nSonos.prototype.play = function (uri, callback) {\n  debug('Sonos.play(%j, %j)', uri, callback)\n  var action\n  var body\n  var self = this\n  var cb = (typeof uri === 'function' ? uri : callback) || function () {}\n  if (typeof uri === 'string') uri = optionsFromSpotifyUri(uri)\n  var options = (typeof uri === 'object' ? uri : {})\n  if (typeof uri === 'object') {\n    options.uri = uri.uri\n    options.metadata = uri.metadata\n  } else {\n    options.uri = (typeof uri === 'string' ? uri : undefined)\n  }\n  if (options.uri) {\n    return this.queue({\n      uri: options.uri,\n      metadata: options.metadata\n    }, function (err, queueResult) {\n      if (err || !queueResult || queueResult.length < 0 || !queueResult[0].FirstTrackNumberEnqueued) {\n        return cb(err)\n      }\n      var selectTrackNum = queueResult[0].FirstTrackNumberEnqueued[0]\n      self.selectTrack(selectTrackNum, function (err) {\n        if (err) return cb(err)\n        return self.play(cb)\n      })\n    })\n  } else {\n    action = '\"urn:schemas-upnp-org:service:AVTransport:1#Play\"'\n    body = '<u:Play xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID><Speed>1</Speed></u:Play>'\n    return this.request(this.options.endpoints.transport, action, body, 'u:PlayResponse', function (err, data) {\n      if (err) return cb(err)\n      if (data[0].$['xmlns:u'] === 'urn:schemas-upnp-org:service:AVTransport:1') {\n        return cb(null, true)\n      } else {\n        return cb(new Error({\n          err: err,\n          data: data\n        }), false)\n      }\n    })\n  }\n}\n\n/**\n * Stop What's Playing\n * @param  {Function} callback (err, stopped)\n */\nSonos.prototype.stop = function (callback) {\n  debug('Sonos.stop(%j)', callback)\n  var action, body\n  action = '\"urn:schemas-upnp-org:service:AVTransport:1#Stop\"'\n  body = '<u:Stop xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID><Speed>1</Speed></u:Stop>'\n  return this.request(this.options.endpoints.transport, action, body, 'u:StopResponse', function (err, data) {\n    if (err) return callback(err)\n    if (data[0].$['xmlns:u'] === 'urn:schemas-upnp-org:service:AVTransport:1') {\n      return callback(null, true)\n    } else {\n      return callback(new Error({\n        err: err,\n        data: data\n      }), false)\n    }\n  })\n}\n\n/**\n * Become Coordinator of Standalone Group\n * @param  {Function} callback (err, stopped)\n */\nSonos.prototype.becomeCoordinatorOfStandaloneGroup = function (callback) {\n  debug('Sonos.becomeCoordinatorOfStandaloneGroup(%j)', callback)\n  var action, body\n  action = '\"urn:schemas-upnp-org:service:AVTransport:1#BecomeCoordinatorOfStandaloneGroup\"'\n  body = '<u:BecomeCoordinatorOfStandaloneGroup xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID></u:BecomeCoordinatorOfStandaloneGroup>'\n  return this.request(this.options.endpoints.transport, action, body, 'u:BecomeCoordinatorOfStandaloneGroupResponse', function (err, data) {\n    if (err) return callback(err)\n    if (data[0].$['xmlns:u'] === 'urn:schemas-upnp-org:service:AVTransport:1') {\n      return callback(null, true)\n    } else {\n      return callback(new Error({\n        err: err,\n        data: data\n      }), false)\n    }\n  })\n}\n\n/**\n * Pause Current Queue\n * @param  {Function} callback (err, paused)\n */\nSonos.prototype.pause = function (callback) {\n  debug('Sonos.pause(%j)', callback)\n  var action, body\n  action = '\"urn:schemas-upnp-org:service:AVTransport:1#Pause\"'\n  body = '<u:Pause xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID><Speed>1</Speed></u:Pause>'\n  return this.request(this.options.endpoints.transport, action, body, 'u:PauseResponse', function (err, data) {\n    if (err) return callback(err)\n    if (data[0].$['xmlns:u'] === 'urn:schemas-upnp-org:service:AVTransport:1') {\n      return callback(null, true)\n    } else {\n      return callback(new Error({\n        err: err,\n        data: data\n      }), false)\n    }\n  })\n}\n\n/**\n * Seek the current track\n * @param  {Function} callback (err, seeked)\n */\nSonos.prototype.seek = function (seconds, callback) {\n  debug('Sonos.seek(%j)', callback)\n  var action, body, hh, mm, ss\n  hh = Math.floor(seconds / 3600)\n  mm = Math.floor((seconds - (hh * 3600)) / 60)\n  ss = seconds - ((hh * 3600) + (mm * 60))\n  if (hh < 10) hh = '0' + hh\n  if (mm < 10) mm = '0' + mm\n  if (ss < 10) ss = '0' + ss\n  action = '\"urn:schemas-upnp-org:service:AVTransport:1#Seek\"'\n  body = '<u:Seek xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID><Unit>REL_TIME</Unit><Target>' + hh + ':' + mm + ':' + ss + '</Target></u:Seek>'\n  return this.request(this.options.endpoints.transport, action, body, 'u:SeekResponse', function (err, data) {\n    if (err) return callback(err)\n    if (data[0].$['xmlns:u'] === 'urn:schemas-upnp-org:service:AVTransport:1') {\n      return callback(null, true)\n    } else {\n      return callback(new Error({\n        err: err,\n        data: data\n      }), false)\n    }\n  })\n}\n\n/**\n * Select specific track in queue\n * @param  {Number}   trackNr    Number of track in queue (optional, indexed from 1)\n * @param  {Function} callback (err, data)\n */\nSonos.prototype.selectTrack = function (trackNr, callback) {\n  if (typeof trackNr === 'function') {\n    callback = trackNr\n    trackNr = 1\n  }\n  var action = '\"urn:schemas-upnp-org:service:AVTransport:1#Seek\"'\n  var body = '<u:Seek xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID><Unit>TRACK_NR</Unit><Target>' + trackNr + '</Target></u:Seek>'\n  return this.request(this.options.endpoints.transport, action, body, 'u:SeekResponse', function (err, data) {\n    if (err) return callback(err)\n    if (data[0].$['xmlns:u'] === 'urn:schemas-upnp-org:service:AVTransport:1') {\n      return callback(null, true)\n    } else {\n      return callback(new Error({\n        err: err,\n        data: data\n      }), false)\n    }\n  })\n}\n\n/**\n * Play next in queue\n * @param  {Function} callback (err, movedToNext)\n */\nSonos.prototype.next = function (callback) {\n  debug('Sonos.next(%j)', callback)\n  var action, body\n  action = '\"urn:schemas-upnp-org:service:AVTransport:1#Next\"'\n  body = '<u:Next xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID><Speed>1</Speed></u:Next>'\n  this.request(this.options.endpoints.transport, action, body, 'u:NextResponse', function (err, data) {\n    if (err) {\n      return callback(err)\n    }\n    if (data[0].$['xmlns:u'] === 'urn:schemas-upnp-org:service:AVTransport:1') {\n      return callback(null, true)\n    } else {\n      return callback(new Error({\n        err: err,\n        data: data\n      }), false)\n    }\n  })\n}\n\n/**\n * Play previous in queue\n * @param  {Function} callback (err, movedToPrevious)\n */\nSonos.prototype.previous = function (callback) {\n  debug('Sonos.previous(%j)', callback)\n  var action, body\n  action = '\"urn:schemas-upnp-org:service:AVTransport:1#Previous\"'\n  body = '<u:Previous xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID><Speed>1</Speed></u:Previous>'\n  this.request(this.options.endpoints.transport, action, body, 'u:PreviousResponse', function (err, data) {\n    if (err) {\n      return callback(err)\n    }\n    if (data[0].$['xmlns:u'] === 'urn:schemas-upnp-org:service:AVTransport:1') {\n      return callback(null, true)\n    } else {\n      return callback(new Error({\n        err: err,\n        data: data\n      }), false)\n    }\n  })\n}\n\n/**\n * Select Queue. Mostly required after turning on the speakers otherwise play, setPlaymode and other commands will fail.\n * @param  {Function}  callback (err, data)  Optional\n */\nSonos.prototype.selectQueue = function (callback) {\n  debug('Sonos.selectQueue(%j)', callback)\n  var cb = callback || function () {}\n  var self = this\n  self.getZoneInfo(function (err, data) {\n    if (!err) {\n      var action = '\"urn:schemas-upnp-org:service:AVTransport:1#SetAVTransportURI\"'\n      var body = '<u:SetAVTransportURI xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID><CurrentURI>' + 'x-rincon-queue:RINCON_' + data.MACAddress.replace(/:/g, '') + '0' + self.port + '#0</CurrentURI><CurrentURIMetaData></CurrentURIMetaData></u:SetAVTransportURI>'\n      self.request(self.options.endpoints.transport, action, body, 'u:SetAVTransportURIResponse', function (err, data) {\n        if (err) return cb(err)\n        if (data[0].$['xmlns:u'] === 'urn:schemas-upnp-org:service:AVTransport:1') {\n          return cb(null, true)\n        } else {\n          return cb(new Error({\n            err: err,\n            data: data\n          }), false)\n        }\n      })\n    } else {\n      return cb(err)\n    }\n  })\n}\n\n/**\n * Plays tunein based on radio station id\n * @param  {String}   stationId  tunein radio station id\n * @param  {Function} callback (err, playing)\n */\nSonos.prototype.playTuneinRadio = function (stationId, stationTitle, callback) {\n  debug('Sonos.playTuneinRadio(%j, %j, %j)', stationId, stationTitle, callback)\n  var self = this\n  if (!stationId || !stationTitle) {\n    return callback(new Error('stationId and stationTitle are required'))\n  }\n  var metadata = '<DIDL-Lite xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:upnp=\"urn:schemas-upnp-org:metadata-1-0/upnp/\" xmlns:r=\"urn:schemas-rinconnetworks-com:metadata-1-0/\" xmlns=\"urn:schemas-upnp-org:metadata-1-0/DIDL-Lite/\"><item id=\"F00092020s##TUNEINSTATIONID##\" parentID=\"L\" restricted=\"true\"><dc:title>##TUNEINSTATIONTITLE##</dc:title><upnp:class>object.item.audioItem.audioBroadcast</upnp:class><desc id=\"cdudn\" nameSpace=\"urn:schemas-rinconnetworks-com:metadata-1-0/\">SA_RINCON65031_</desc></item></DIDL-Lite>'\n  metadata = metadata.replace('##TUNEINSTATIONID##', stationId).replace('##TUNEINSTATIONTITLE##', stationTitle)\n  var action = '\"urn:schemas-upnp-org:service:AVTransport:1#SetAVTransportURI\"'\n  var body = '<u:SetAVTransportURI xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID><CurrentURI>x-sonosapi-stream:s' + stationId + '?sid=254&amp;flags=8224&amp;sn=0</CurrentURI><CurrentURIMetaData>' + htmlEntities(metadata) + '</CurrentURIMetaData></u:SetAVTransportURI>'\n  return this.request(this.options.endpoints.transport, action, body, 'u:SetAVTransportURIResponse', function (err, data) {\n    if (err) return callback(err)\n    if (data[0].$['xmlns:u'] === 'urn:schemas-upnp-org:service:AVTransport:1') {\n      return self.play(callback)\n    } else {\n      return callback(new Error({\n        err: err,\n        data: data\n      }), false)\n    }\n  })\n}\n\n/**\n * Add a song from spotify to the queue\n * @param  {String}   trackId      The spotify track ID\n * @param  {Function} callback (err, success)\n */\nSonos.prototype.addSpotify = function (trackId, callback) {\n  var uri = 'x-sonos-spotify:spotify%3atrack%3a' + trackId\n  var meta = '<DIDL-Lite xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:upnp=\"urn:schemas-upnp-org:metadata-1-0/upnp/\" xmlns:r=\"urn:schemas-rinconnetworks-com:metadata-1-0/\" xmlns=\"urn:schemas-upnp-org:metadata-1-0/DIDL-Lite/\"><item id=\"00032020spotify%3atrack%3a' + trackId + '\" restricted=\"true\"><dc:title></dc:title><upnp:class>object.item.audioItem.musicTrack</upnp:class><desc id=\"cdudn\" nameSpace=\"urn:schemas-rinconnetworks-com:metadata-1-0/\">SA_RINCON3079_X_#Svc3079-0-Token</desc></item></DIDL-Lite>'\n\n  this.queue({\n    uri: uri,\n    metadata: meta\n  }, callback)\n}\n\n/**\n * Plays Spotify radio based on artist uri\n * @param  {String}   artistId  Spotify artist id\n * @param  {Function} callback (err, playing)\n */\nSonos.prototype.playSpotifyRadio = function (artistId, artistName, callback) {\n  debug('Sonos.playSpotifyRadio(%j, %j, %j)', artistId, artistName, callback)\n  var self = this\n  if (!artistId || !artistName) {\n    return callback(new Error('artistId and artistName are required'))\n  }\n  var options = optionsFromSpotifyUri('spotify:artistRadio:' + artistId, artistName)\n  var action = '\"urn:schemas-upnp-org:service:AVTransport:1#SetAVTransportURI\"'\n  var body = '<u:SetAVTransportURI xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID><CurrentURI>x-sonosapi-radio:' + options.uri + '?sid=12&amp;flags=8300&amp;sn=1</CurrentURI><CurrentURIMetaData>' + htmlEntities(options.metadata) + '</CurrentURIMetaData></u:SetAVTransportURI>'\n  return this.request(this.options.endpoints.transport, action, body, 'u:SetAVTransportURIResponse', function (err, data) {\n    if (err) return callback(err)\n    if (data[0].$['xmlns:u'] === 'urn:schemas-upnp-org:service:AVTransport:1') {\n      return self.play(callback)\n    } else {\n      return callback(new Error({\n        err: err,\n        data: data\n      }), false)\n    }\n  })\n}\n\n/**\n * Queue a Song Next\n * @param  {String|Object}   uri      URI to Audio Stream or Object containing options (uri, metadata)\n * @param  {Function} callback (err, queued)\n */\nSonos.prototype.queueNext = function (uri, callback) {\n  debug('Sonos.queueNext(%j, %j)', uri, callback)\n  var options = (typeof uri === 'object' ? uri : { metadata: '' })\n  if (typeof uri === 'object') {\n    options.metadata = uri.metadata || ''\n    options.metadata = htmlEntities(options.metadata)\n    options.uri = uri.uri\n  } else {\n    options.uri = uri\n  }\n  var action = '\"urn:schemas-upnp-org:service:AVTransport:1#SetAVTransportURI\"'\n  var body = '<u:SetAVTransportURI xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID><CurrentURI>' + options.uri + '</CurrentURI><CurrentURIMetaData>' + options.metadata + '</CurrentURIMetaData></u:SetAVTransportURI>'\n  this.request(this.options.endpoints.transport, action, body, 'u:SetAVTransportURIResponse', function (err, data) {\n    if (callback) {\n      return callback(err, data)\n    } else {\n      return null\n    }\n  })\n}\n\n/**\n * Add a song to the queue.\n * @param  {String}   uri             URI to Audio Stream\n * @param  {Number}   positionInQueue Position in queue at which to add song (optional, indexed from 1,\n *                                    defaults to end of queue, 0 to explicitly set end of queue)\n * @param  {Function} callback (err, queued)\n */\nSonos.prototype.queue = function (uri, positionInQueue, callback) {\n  debug('Sonos.queue(%j, %j, %j)', uri, positionInQueue, callback)\n  if (typeof positionInQueue === 'function') {\n    callback = positionInQueue\n    positionInQueue = 0\n  }\n  if (typeof uri === 'string') uri = optionsFromSpotifyUri(uri)\n  var options = (typeof uri === 'object' ? uri : { metadata: '' })\n  if (typeof uri === 'object') {\n    options.metadata = uri.metadata || ''\n    options.metadata = htmlEntities(options.metadata)\n    options.uri = uri.uri\n  } else {\n    options.uri = uri\n  }\n  var action = '\"urn:schemas-upnp-org:service:AVTransport:1#AddURIToQueue\"'\n  var body = '<u:AddURIToQueue xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID><EnqueuedURI>' + options.uri + '</EnqueuedURI><EnqueuedURIMetaData>' + options.metadata + '</EnqueuedURIMetaData><DesiredFirstTrackNumberEnqueued>' + positionInQueue + '</DesiredFirstTrackNumberEnqueued><EnqueueAsNext>1</EnqueueAsNext></u:AddURIToQueue>'\n  this.request(this.options.endpoints.transport, action, body, 'u:AddURIToQueueResponse', function (err, data) {\n    return callback(err, data)\n  })\n}\n\n/**\n * Flush queue\n * @param  {Function} callback (err, flushed)\n */\nSonos.prototype.flush = function (callback) {\n  debug('Sonos.flush(%j)', callback)\n  var action, body\n  action = '\"urn:schemas-upnp-org:service:AVTransport:1#RemoveAllTracksFromQueue\"'\n  body = '<u:RemoveAllTracksFromQueue xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID></u:RemoveAllTracksFromQueue>'\n  this.request(this.options.endpoints.transport, action, body, 'u:RemoveAllTracksFromQueueResponse', function (err, data) {\n    return callback(err, data)\n  })\n}\n\n/**\n * Get the LED State\n * @param  {Function} callback (err, state) state is a string, \"On\" or \"Off\"\n */\nSonos.prototype.getLEDState = function (callback) {\n  debug('Sonos.getLEDState(%j)', callback)\n  var action = '\"urn:schemas-upnp-org:service:DeviceProperties:1#GetLEDState\"'\n  var body = '<u:GetLEDState xmlns:u=\"urn:schemas-upnp-org:service:DeviceProperties:1\"></u:GetLEDState>'\n  this.request(this.options.endpoints.device, action, body, 'u:GetLEDStateResponse', function (err, data) {\n    if (err) return callback(err, data)\n    if (data[0] && data[0].CurrentLEDState && data[0].CurrentLEDState[0]) {\n      return callback(null, data[0].CurrentLEDState[0])\n    }\n    callback(new Error('unknown response'))\n  })\n}\n\n/**\n * Set the LED State\n * @param  {String}   desiredState           \"On\"/\"Off\"\n * @param  {Function} callback (err)\n */\nSonos.prototype.setLEDState = function (desiredState, callback) {\n  debug('Sonos.setLEDState(%j, %j)', desiredState, callback)\n  var action = '\"urn:schemas-upnp-org:service:DeviceProperties:1#SetLEDState\"'\n  var body = '<u:SetLEDState xmlns:u=\"urn:schemas-upnp-org:service:DeviceProperties:1\"><DesiredLEDState>' + desiredState + '</DesiredLEDState></u:SetLEDState>'\n  this.request(this.options.endpoints.device, action, body, 'u:SetLEDStateResponse', function (err) {\n    return callback(err)\n  })\n}\n\n/**\n * Get Zone Info\n * @param  {Function} callback (err, info)\n */\nSonos.prototype.getZoneInfo = function (callback) {\n  debug('Sonos.getZoneInfo(%j)', callback)\n  var action = '\"urn:schemas-upnp-org:service:DeviceProperties:1#GetZoneInfo\"'\n  var body = '<u:GetZoneInfo xmlns:u=\"urn:schemas-upnp-org:service:DeviceProperties:1\"></u:GetZoneInfo>'\n  this.request(this.options.endpoints.device, action, body, 'u:GetZoneInfoResponse', function (err, data) {\n    if (err) return callback(err, data)\n    var output = {}\n    for (var d in data[0]) if (data[0].hasOwnProperty(d) && d !== '$') output[d] = data[0][d][0]\n    callback(null, output)\n  })\n}\n\n/**\n * Get Zone Attributes\n * @param  {Function} callback (err, data)\n */\nSonos.prototype.getZoneAttrs = function (callback) {\n  debug('Sonos.getZoneAttrs(%j, %j)', callback)\n  var action = '\"urn:schemas-upnp-org:service:DeviceProperties:1#GetZoneAttributes\"'\n  var body = '\"<u:GetZoneAttributes xmlns:u=\"urn:schemas-upnp-org:service:DeviceProperties:1\"></u:GetZoneAttributes>\"'\n  this.request(this.options.endpoints.device, action, body, 'u:GetZoneAttributesResponse', function (err, data) {\n    if (err) return callback(err, data)\n    var output = {}\n    for (var d in data[0]) if (data[0].hasOwnProperty(d) && d !== '$') output[d] = data[0][d][0]\n    callback(null, output)\n  })\n}\n\n/**\n * Get Information provided by /xml/device_description.xml\n * @param  {Function} callback (err, info)\n */\nSonos.prototype.deviceDescription = function (callback) {\n  request({\n    uri: 'http://' + this.host + ':' + this.port + '/xml/device_description.xml'\n  }, function (err, res, body) {\n    if (err) return callback(err)\n    if (res.statusCode !== 200) {\n      return callback(new Error('non 200 errorCode'))\n    }\n    (new xml2js.Parser()).parseString(body, function (err, json) {\n      if (err) return callback(err)\n      var output = {}\n      for (var d in json.root.device[0]) if (json.root.device[0].hasOwnProperty(d)) output[d] = json.root.device[0][d][0]\n      callback(null, output)\n    })\n  })\n}\n\n/**\n * Set Name\n * @param  {String}   name\n * @param  {Function} callback (err, data)\n */\nSonos.prototype.setName = function (name, callback) {\n  debug('Sonos.setName(%j, %j)', name, callback)\n  name = name.replace(/[<&]/g, function (str) { return (str === '&') ? '&amp;' : '&lt;' })\n  var action = '\"urn:schemas-upnp-org:service:DeviceProperties:1#SetZoneAttributes\"'\n  var body = '\"<u:SetZoneAttributes xmlns:u=\"urn:schemas-upnp-org:service:DeviceProperties:1\"><DesiredZoneName>' + name + '</DesiredZoneName><DesiredIcon /><DesiredConfiguration /></u:SetZoneAttributes>\"'\n  this.request(this.options.endpoints.device, action, body, 'u:SetZoneAttributesResponse', function (err, data) {\n    return callback(err, data)\n  })\n}\n\n/**\n * Set Play Mode\n * @param  {String} playmode\n * @param  {Function} callback (err, data)\n * @return {[type]}\n */\nSonos.prototype.setPlayMode = function (playmode, callback) {\n  debug('Sonos.setPlayMode(%j, %j)', playmode, callback)\n  var mode = { NORMAL: true, REPEAT_ALL: true, SHUFFLE: true, SHUFFLE_NOREPEAT: true }[playmode.toUpperCase()]\n  if (!mode) return callback(new Error('invalid play mode ' + playmode))\n  var action = '\"urn:schemas-upnp-org:service:AVTransport:1#SetPlayMode\"'\n  var body = '<u:SetPlayMode xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID><NewPlayMode>' + playmode.toUpperCase() + '</NewPlayMode></u:SetPlayMode>'\n  this.request(this.options.endpoints.transport, action, body, 'u:SetPlayModeResponse', function (err, data) {\n    return callback(err, data)\n  })\n}\n\n/**\n * Set Volume\n * @param  {String}   volume 0..100\n * @param  {Function} callback (err, data)\n * @return {[type]}\n */\nSonos.prototype.setVolume = function (volume, callback) {\n  debug('Sonos.setVolume(%j, %j)', volume, callback)\n  var action = '\"urn:schemas-upnp-org:service:RenderingControl:1#SetVolume\"'\n  var body = '<u:SetVolume xmlns:u=\"urn:schemas-upnp-org:service:RenderingControl:1\"><InstanceID>0</InstanceID><Channel>Master</Channel><DesiredVolume>' + volume + '</DesiredVolume></u:SetVolume>'\n  this.request(this.options.endpoints.rendering, action, body, 'u:SetVolumeResponse', function (err, data) {\n    return callback(err, data)\n  })\n}\n\n/**\n * Set Muted\n * @param  {Boolean}  muted\n * @param  {Function} callback (err, data)\n * @return {[type]}\n */\nSonos.prototype.setMuted = function (muted, callback) {\n  debug('Sonos.setMuted(%j, %j)', muted, callback)\n  if (typeof muted === 'string') muted = !!parseInt(muted, 10)\n  var action = '\"urn:schemas-upnp-org:service:RenderingControl:1#SetMute\"'\n  var body = '<u:SetMute xmlns:u=\"urn:schemas-upnp-org:service:RenderingControl:1\"><InstanceID>0</InstanceID><Channel>Master</Channel><DesiredMute>' + (muted ? '1' : '0') + '</DesiredMute></u:SetMute>'\n  this.request(this.options.endpoints.rendering, action, body, 'u:SetMutedResponse', function (err, data) {\n    return callback(err, data)\n  })\n}\n\n/**\n * Get Zones in contact with current Zone with Group Data\n * @param  {Function} callback (err, topology)\n */\nSonos.prototype.getTopology = function (callback) {\n  debug('Sonos.getTopology(%j)', callback)\n  request('http://' + this.host + ':' + this.port + '/status/topology', function (err, res, body) {\n    if (err) return callback(err)\n    debug(body)\n    xml2js.parseString(body, function (err, topology) {\n      if (err) return callback(err)\n      var info = topology.ZPSupportInfo\n      var zones = null\n      var mediaServers = null\n      if (info.ZonePlayers && info.ZonePlayers.length > 0) {\n        zones = _.map(info.ZonePlayers[0].ZonePlayer, function (zone) {\n          return _.extend(zone.$, {name: zone._})\n        })\n      }\n      if (info.MediaServers && info.MediaServers.length > 0) {\n        mediaServers = _.map(info.MediaServers[0].MediaServer, function (zone) {\n          return _.extend(zone.$, {name: zone._})\n        })\n      }\n      callback(null, {\n        zones: zones,\n        mediaServers: mediaServers\n      })\n    })\n  })\n}\n/**\n * Get Current Playback State\n * @param  {Function} callback (err, state)\n */\nSonos.prototype.getCurrentState = function (callback) {\n  debug('Sonos.currentState(%j)', callback)\n  var action = '\"urn:schemas-upnp-org:service:AVTransport:1#GetTransportInfo\"'\n  var body = '<u:GetTransportInfo xmlns:u=\"urn:schemas-upnp-org:service:AVTransport:1\"><InstanceID>0</InstanceID></u:GetTransportInfo>'\n  var state = null\n  return this.request(this.options.endpoints.transport, action, body, 'u:GetTransportInfoResponse', function (err, data) {\n    if (err) {\n      callback(err)\n      return\n    }\n    if (JSON.stringify(data[0].CurrentTransportState) === '[\"STOPPED\"]') {\n      state = 'stopped'\n    } else if (JSON.stringify(data[0].CurrentTransportState) === '[\"PLAYING\"]') {\n      state = 'playing'\n    } else if (JSON.stringify(data[0].CurrentTransportState) === '[\"PAUSED_PLAYBACK\"]') {\n      state = 'paused'\n    } else if (JSON.stringify(data[0].CurrentTransportState) === '[\"TRANSITIONING\"]') {\n      state = 'transitioning'\n    } else if (JSON.stringify(data[0].CurrentTransportState) === '[\"NO_MEDIA_PRESENT\"]') {\n      state = 'no_media'\n    }\n    return callback(err, state)\n  })\n}\n/**\n * Get Favorites Radio Stations\n * @param  {Object}   options     Optional - default {start: 0, total: 100}\n * @param  {Function} callback (err, result) result - {returned: {String}, total: {String}, items:[{title:{String}, uri: {String}}]}\n */\nSonos.prototype.getFavoritesRadioStations = function (options, callback) {\n  this.getFavoritesRadio('stations', options, callback)\n}\n/**\n * Get Favorites Radio Shows\n * @param  {Object}   options     Optional - default {start: 0, total: 100}\n * @param  {Function} callback (err, result) result - {returned: {String}, total: {String}, items:[{title:{String}, uri: {String}}]}\n */\nSonos.prototype.getFavoritesRadioShows = function (options, callback) {\n  this.getFavoritesRadio('shows', options, callback)\n}\n/**\n * Get Favorites Radio for a given radio type\n * @param  {String}   favoriteRadioType  Choice - stations, shows\n * @param  {Object}   options     Optional - default {start: 0, total: 100}\n * @param  {Function} callback (err, result) result - {returned: {String}, total: {String}, items:[{title:{String}, uri: {String}}]}\n */\nSonos.prototype.getFavoritesRadio = function (favoriteRadioType, options, callback) {\n  var radioTypes = {\n    'stations': 'R:0/0',\n    'shows': 'R:0/1'\n  }\n  var defaultOptions = {\n    BrowseFlag: 'BrowseDirectChildren',\n    Filter: '*',\n    StartingIndex: '0',\n    RequestedCount: '100',\n    SortCriteria: '',\n    ObjectID: 'R:0/0'\n  }\n  var opts = {\n    ObjectID: radioTypes[favoriteRadioType]\n  }\n  if (options.start !== undefined) opts.StartingIndex = options.start\n  if (options.total !== undefined) opts.RequestedCount = options.total\n  opts = _.extend(defaultOptions, opts)\n  var contentDirectory = new Services.ContentDirectory(this.host, this.port)\n  return contentDirectory.Browse(opts, function (err, data) {\n    if (err) return callback(err)\n    return (new xml2js.Parser()).parseString(data.Result, function (err, didl) {\n      if (err) return callback(err, data)\n      var items = []\n      if ((!didl) || (!didl['DIDL-Lite'])) {\n        return callback(new Error('Cannot parse DIDTL result'), data)\n      }\n      var resultcontainer = didl['DIDL-Lite'].item\n      if (!util.isArray(resultcontainer)) {\n        return callback(new Error('Cannot parse DIDTL result'), data)\n      }\n      _.each(resultcontainer, function (item) {\n        items.push({\n          'title': util.isArray(item['dc:title']) ? item['dc:title'][0] : null,\n          'uri': util.isArray(item.res) ? item.res[0]._ : null\n        })\n      })\n      var result = {\n        returned: data.NumberReturned,\n        total: data.TotalMatches,\n        items: items\n      }\n      return callback(null, result)\n    })\n  })\n}\n\n// Add Spotify track to the queue.\n\nSonos.prototype.addSpotifyQueue = function (trackId, callback) {\n  var rand = '00030020'\n  var uri = 'x-sonos-spotify:spotify%3atrack%3a' + trackId\n  var meta = '<DIDL-Lite xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:upnp=\"urn:schemas-upnp-org:metadata-1-0/upnp/\" xmlns:r=\"urn:schemas-rinconnetworks-com:metadata-1-0/\" xmlns=\"urn:schemas-upnp-org:metadata-1-0/DIDL-Lite/\"><item id=\"' + rand + 'spotify%3atrack%3a' + trackId + '\" restricted=\"true\"><dc:title></dc:title><upnp:class>object.item.audioItem.musicTrack</upnp:class><desc id=\"cdudn\" nameSpace=\"urn:schemas-rinconnetworks-com:metadata-1-0/\">SA_RINCON2311_X_#Svc2311-0-Token</desc></item></DIDL-Lite>'\n\n  this.queue({\n    uri: uri,\n    metadata: meta\n  }, callback)\n}\n\n// Get queue\n\nSonos.prototype.getQueue = function (callback) {\n  var self = this\n\n  var defaultOptions = {\n    BrowseFlag: 'BrowseDirectChildren',\n    Filter: '*',\n    StartingIndex: '0',\n    RequestedCount: '1000',\n    SortCriteria: ''\n  }\n\n  var opts = {\n    ObjectID: 'Q:0'\n  }\n\n  opts = _.extend(defaultOptions, opts)\n\n  var contentDirectory = new Services.ContentDirectory(this.host, this.port)\n  return contentDirectory.Browse(opts, function (err, data) {\n    if (err) return callback(err)\n    return (new xml2js.Parser()).parseString(data.Result, function (err, didl) {\n      if (err) return callback(err, data)\n      var items = []\n      if ((!didl) || (!didl['DIDL-Lite'])) {\n        return callback(new Error('Cannot parse DIDTL result'), data)\n      }\n      var resultcontainer = didl['DIDL-Lite'].item\n      if (!util.isArray(resultcontainer)) {\n        return callback(new Error('Cannot parse DIDTL result'), data)\n      }\n      _.each(resultcontainer, function (item) {\n        var albumArtURL = null\n        if (util.isArray(item['upnp:albumArtURI'])) {\n          if (item['upnp:albumArtURI'][0].indexOf('http') !== -1) {\n            albumArtURL = item['upnp:albumArtURI'][0]\n          } else {\n            albumArtURL = 'http://' + self.host + ':' + self.port + item['upnp:albumArtURI'][0]\n          }\n        }\n        items.push({\n          'title': util.isArray(item['dc:title']) ? item['dc:title'][0] : null,\n          'artist': util.isArray(item['dc:creator']) ? item['dc:creator'][0] : null,\n          'albumArtURL': albumArtURL,\n          'album': util.isArray(item['upnp:album']) ? item['upnp:album'][0] : null,\n          'uri': util.isArray(item.res) ? item.res[0]._ : null\n        })\n      })\n      var result = {\n        returned: data.NumberReturned,\n        total: data.TotalMatches,\n        items: items\n      }\n      return callback(null, result)\n    })\n  })\n}\n\n/**\n * Search \"Class\"\n * Emits 'DeviceAvailable' on a Sonos Component Discovery\n */\nvar Search = function Search (options) {\n  var self = this\n  self.foundSonosDevices = {}\n  var PLAYER_SEARCH = new Buffer(['M-SEARCH * HTTP/1.1',\n    'HOST: 239.255.255.250:1900',\n    'MAN: ssdp:discover',\n    'MX: 1',\n    'ST: urn:schemas-upnp-org:device:ZonePlayer:1'].join('\\r\\n'))\n  var sendDiscover = function () {\n    ['239.255.255.250', '255.255.255.255'].map(function (addr) {\n      self.socket.send(PLAYER_SEARCH, 0, PLAYER_SEARCH.length, 1900, addr)\n    })\n    // Periodically send discover packet to find newly added devices\n    self.pollTimer = setTimeout(sendDiscover, 10000)\n    self.on('timeout', function () {\n      clearTimeout(self.pollTimer)\n    })\n  }\n  this.socket = dgram.createSocket('udp4', function (buffer, rinfo) {\n    buffer = buffer.toString()\n    if (buffer.match(/.+Sonos.+/)) {\n      var modelCheck = buffer.match(/SERVER.*\\((.*)\\)/)\n      var model = (modelCheck.length > 1 ? modelCheck[1] : null)\n      var addr = rinfo.address\n      if (!(addr in self.foundSonosDevices)) {\n        var sonos = self.foundSonosDevices[addr] = new Sonos(addr)\n        self.emit('DeviceAvailable', sonos, model)\n      }\n    }\n  })\n  this.socket.on('error', function (err) {\n    self.emit('error', err)\n  })\n  this.socket.bind(options, function () {\n    self.socket.setBroadcast(true)\n    sendDiscover()\n  })\n  if (options.timeout) {\n    self.searchTimer = setTimeout(function () {\n      self.socket.close()\n      self.emit('timeout')\n    }, options.timeout)\n  }\n  return this\n}\nutil.inherits(Search, EventEmitter)\n\n/**\n * Destroys Search class, stop searching, clean up\n *\n * @param  {Function} callback ()\n */\nSearch.prototype.destroy = function (callback) {\n  clearTimeout(this.searchTimer)\n  clearTimeout(this.pollTimer)\n  this.socket.close(callback)\n}\n\n/**\n * Create a Search Instance (emits 'DeviceAvailable' with a found Sonos Component)\n * @param  {Object} options Optional Options to control search behavior.\n *                          Set 'timeout' to how long to search for devices\n *                          (in milliseconds).\n * @param  {Function} listener Optional 'DeviceAvailable' listener (sonos)\n * @return {Search/EventEmitter Instance}\n */\nvar search = function (options, listener) {\n  if (typeof options === 'function') {\n    listener = options\n    options = null\n  }\n  options = options || {}\n  listener = listener || null\n  var search = new Search(options)\n  if (listener !== null) {\n    search.on('DeviceAvailable', listener)\n  }\n  return search\n}\n/**\n * Export\n */\nmodule.exports.Sonos = Sonos\nmodule.exports.search = search\nmodule.exports.Services = Services\n","/home/travis/build/npmtest/node-npmtest-sonos/node_modules/sonos/lib/services/AlarmClock.js":"var AlarmClock = function (host, port) {\n  this.name = 'AlarmClock'\n  this.host = host\n  this.port = port || 1400\n  this.controlURL = '/AlarmClock/Control'\n  this.eventSubURL = '/AlarmClock/Event'\n  this.SCPDURL = '/xml/AlarmClock1.xml'\n}\n\nrequire('util').inherits(AlarmClock, require('./Service'))\n\nAlarmClock.prototype.SetFormat = function (options, callback) { this._request('SetFormat', options, callback) }\nAlarmClock.prototype.GetFormat = function (options, callback) { this._request('GetFormat', options, callback) }\nAlarmClock.prototype.SetTimeZone = function (options, callback) { this._request('SetTimeZone', options, callback) }\nAlarmClock.prototype.GetTimeZone = function (options, callback) { this._request('GetTimeZone', options, callback) }\nAlarmClock.prototype.GetTimeZoneAndRule = function (options, callback) { this._request('GetTimeZoneAndRule', options, callback) }\nAlarmClock.prototype.GetTimeZoneRule = function (options, callback) { this._request('GetTimeZoneRule', options, callback) }\nAlarmClock.prototype.SetTimeServer = function (options, callback) { this._request('SetTimeServer', options, callback) }\nAlarmClock.prototype.GetTimeServer = function (options, callback) { this._request('GetTimeServer', options, callback) }\nAlarmClock.prototype.SetTimeNow = function (options, callback) { this._request('SetTimeNow', options, callback) }\nAlarmClock.prototype.GetHouseholdTimeAtStamp = function (options, callback) { this._request('GetHouseholdTimeAtStamp', options, callback) }\nAlarmClock.prototype.GetTimeNow = function (options, callback) { this._request('GetTimeNow', options, callback) }\nAlarmClock.prototype.CreateAlarm = function (options, callback) { this._request('CreateAlarm', options, callback) }\nAlarmClock.prototype.UpdateAlarm = function (options, callback) { this._request('UpdateAlarm', options, callback) }\nAlarmClock.prototype.DestroyAlarm = function (options, callback) { this._request('DestroyAlarm', options, callback) }\nAlarmClock.prototype.ListAlarms = function (options, callback) { this._request('ListAlarms', options, callback) }\nAlarmClock.prototype.SetDailyIndexRefreshTime = function (options, callback) { this._request('SetDailyIndexRefreshTime', options, callback) }\nAlarmClock.prototype.GetDailyIndexRefreshTime = function (options, callback) { this._request('GetDailyIndexRefreshTime', options, callback) }\n\nmodule.exports = AlarmClock\n","/home/travis/build/npmtest/node-npmtest-sonos/node_modules/sonos/lib/services/Service.js":"/**\n * Dependencies\n */\n\nvar request = require('request')\nvar parseString = require('xml2js').parseString\nvar _ = require('underscore')\n\n  /**\n   * Helpers\n   */\n\nvar withinEnvelope = function (body) {\n  return ['<?xml version=\"1.0\" encoding=\"utf-8\"?>',\n    '<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">',\n    '  <s:Body>' + body + '</s:Body>',\n    '</s:Envelope>'].join('')\n}\n\n/**\n * \"Class\" Service\n */\n\nvar Service = function (options) {\n  this.name = options.name\n  this.host = options.host\n  this.port = options.port || 1400\n  this.controlURL = options.controlURL\n  this.eventSubURL = options.eventSubURL\n  this.SCPDURL = options.SCPDURL\n  return this\n}\n\nService.prototype._request = function (action, variables, callback) {\n  var messageAction = '\"urn:schemas-upnp-org:service:' + this.name + ':1#' + action + '\"'\n  var messageBodyPre = '<u:' + action + ' xmlns:u=\"urn:schemas-upnp-org:service:' + this.name + ':1\">'\n  var messageBodyPost = '</u:' + action + '>'\n  var messageBody = messageBodyPre + _.map(variables, function (value, key) {\n    return '<' + key + '>' + value + '</' + key + '>'\n  }).join('') + messageBodyPost\n  var responseTag = 'u:' + action + 'Response'\n\n  request({\n    uri: 'http://' + this.host + ':' + this.port + this.controlURL,\n    method: 'POST',\n    headers: {\n      'SOAPAction': messageAction,\n      'Content-type': 'text/xml; charset=utf8'\n    },\n    body: withinEnvelope(messageBody)\n  }, function (err, res, body) {\n    if (err) return callback(err)\n\n    parseString(body, function (err, json) {\n      if (err) return callback(err)\n\n      if (typeof json['s:Envelope']['s:Body'][0]['s:Fault'] !== 'undefined') {\n        return callback(new Error(json['s:Envelope']['s:Body'][0]['s:Fault'][0].faultstring[0] +\n          ': ' + json['s:Envelope']['s:Body'][0]['s:Fault'][0].detail[0].UPnPError[0].errorCode[0]))\n      }\n\n      var output = json['s:Envelope']['s:Body'][0][responseTag][0]\n      delete output.$\n      _.each(output, function (item, key) {\n        output[key] = item[0]\n      })\n      return callback(null, output)\n    })\n  })\n}\n\nmodule.exports = Service\n","/home/travis/build/npmtest/node-npmtest-sonos/node_modules/sonos/lib/services/AudioIn.js":"var AudioIn = function (host, port) {\n  this.name = 'AudioIn'\n  this.host = host\n  this.port = port || 1400\n  this.controlURL = '/AudioIn/Control'\n  this.eventSubURL = '/AudioIn/Event'\n  this.SCPDURL = '/xml/AudioIn1.xml'\n}\n\nrequire('util').inherits(AudioIn, require('./Service'))\n\nAudioIn.prototype.StartTransmissionToGroup = function (options, callback) { this._request('StartTransmissionToGroup', options, callback) }\nAudioIn.prototype.StopTransmissionToGroup = function (options, callback) { this._request('StopTransmissionToGroup', options, callback) }\nAudioIn.prototype.SetAudioInputAttributes = function (options, callback) { this._request('SetAudioInputAttributes', options, callback) }\nAudioIn.prototype.GetAudioInputAttributes = function (options, callback) { this._request('GetAudioInputAttributes', options, callback) }\nAudioIn.prototype.SetLineInLevel = function (options, callback) { this._request('SetLineInLevel', options, callback) }\nAudioIn.prototype.GetLineInLevel = function (options, callback) { this._request('GetLineInLevel', options, callback) }\nAudioIn.prototype.SelectAudio = function (options, callback) { this._request('SelectAudio', options, callback) }\n\nmodule.exports = AudioIn\n","/home/travis/build/npmtest/node-npmtest-sonos/node_modules/sonos/lib/services/AVTransport.js":"var AVTransport = function (host, port) {\n  this.name = 'AVTransport'\n  this.host = host\n  this.port = port || 1400\n  this.controlURL = '/MediaRenderer/AVTransport/Control'\n  this.eventSubURL = '/MediaRenderer/AVTransport/Event'\n  this.SCPDURL = '/xml/AVTransport1.xml'\n}\n\nrequire('util').inherits(AVTransport, require('./Service'))\n\nAVTransport.prototype.SetAVTransportURI = function (options, callback) { this._request('SetAVTransportURI', options, callback) }\nAVTransport.prototype.AddURIToQueue = function (options, callback) { this._request('AddURIToQueue', options, callback) }\nAVTransport.prototype.AddMultipleURIsToQueue = function (options, callback) { this._request('AddMultipleURIsToQueue', options, callback) }\nAVTransport.prototype.ReorderTracksInQueue = function (options, callback) { this._request('ReorderTracksInQueue', options, callback) }\nAVTransport.prototype.RemoveTrackFromQueue = function (options, callback) { this._request('RemoveTrackFromQueue', options, callback) }\nAVTransport.prototype.RemoveTrackRangeFromQueue = function (options, callback) { this._request('RemoveTrackRangeFromQueue', options, callback) }\nAVTransport.prototype.RemoveAllTracksFromQueue = function (options, callback) { this._request('RemoveAllTracksFromQueue', options, callback) }\nAVTransport.prototype.SaveQueue = function (options, callback) { this._request('SaveQueue', options, callback) }\nAVTransport.prototype.BackupQueue = function (options, callback) { this._request('BackupQueue', options, callback) }\nAVTransport.prototype.GetMediaInfo = function (options, callback) { this._request('GetMediaInfo', options, callback) }\nAVTransport.prototype.GetTransportInfo = function (options, callback) { this._request('GetTransportInfo', options, callback) }\nAVTransport.prototype.GetPositionInfo = function (options, callback) { this._request('GetPositionInfo', options, callback) }\nAVTransport.prototype.GetDeviceCapabilities = function (options, callback) { this._request('GetDeviceCapabilities', options, callback) }\nAVTransport.prototype.GetTransportSettings = function (options, callback) { this._request('GetTransportSettings', options, callback) }\nAVTransport.prototype.GetCrossfadeMode = function (options, callback) { this._request('GetCrossfadeMode', options, callback) }\nAVTransport.prototype.Stop = function (options, callback) { this._request('Stop', options, callback) }\nAVTransport.prototype.Play = function (options, callback) { this._request('Play', options, callback) }\nAVTransport.prototype.Pause = function (options, callback) { this._request('Pause', options, callback) }\nAVTransport.prototype.Seek = function (options, callback) { this._request('Seek', options, callback) }\nAVTransport.prototype.Next = function (options, callback) { this._request('Next', options, callback) }\nAVTransport.prototype.NextProgrammedRadioTracks = function (options, callback) { this._request('NextProgrammedRadioTracks', options, callback) }\nAVTransport.prototype.Previous = function (options, callback) { this._request('Previous', options, callback) }\nAVTransport.prototype.NextSection = function (options, callback) { this._request('NextSection', options, callback) }\nAVTransport.prototype.PreviousSection = function (options, callback) { this._request('PreviousSection', options, callback) }\nAVTransport.prototype.SetPlayMode = function (options, callback) { this._request('SetPlayMode', options, callback) }\nAVTransport.prototype.SetCrossfadeMode = function (options, callback) { this._request('SetCrossfadeMode', options, callback) }\nAVTransport.prototype.NotifyDeletedURI = function (options, callback) { this._request('NotifyDeletedURI', options, callback) }\nAVTransport.prototype.GetCurrentTransportActions = function (options, callback) { this._request('GetCurrentTransportActions', options, callback) }\nAVTransport.prototype.BecomeCoordinatorOfStandaloneGroup = function (options, callback) { this._request('BecomeCoordinatorOfStandaloneGroup', options, callback) }\nAVTransport.prototype.DelegateGroupCoordinationTo = function (options, callback) { this._request('DelegateGroupCoordinationTo', options, callback) }\nAVTransport.prototype.BecomeGroupCoordinator = function (options, callback) { this._request('BecomeGroupCoordinator', options, callback) }\nAVTransport.prototype.BecomeGroupCoordinatorAndSource = function (options, callback) { this._request('BecomeGroupCoordinatorAndSource', options, callback) }\n\nmodule.exports = AVTransport\n","/home/travis/build/npmtest/node-npmtest-sonos/node_modules/sonos/lib/services/ContentDirectory.js":"var ContentDirectory = function (host, port) {\n  this.name = 'ContentDirectory'\n  this.host = host\n  this.port = port || 1400\n  this.controlURL = '/MediaServer/ContentDirectory/Control'\n  this.eventSubURL = '/MediaServer/ContentDirectory/Event'\n  this.SCPDURL = '/xml/ContentDirectory1.xml'\n}\n\nrequire('util').inherits(ContentDirectory, require('./Service'))\n\nContentDirectory.prototype.Browse = function (options, callback) { this._request('Browse', options, callback) }\n\nmodule.exports = ContentDirectory\n","/home/travis/build/npmtest/node-npmtest-sonos/node_modules/sonos/lib/services/DeviceProperties.js":"var DeviceProperties = function (host, port) {\n  this.name = 'DeviceProperties'\n  this.host = host\n  this.port = port || 1400\n  this.controlURL = '/DeviceProperties/Control'\n  this.eventSubURL = '/DeviceProperties/Event'\n  this.SCPDURL = '/xml/DeviceProperties1.xml'\n}\n\nrequire('util').inherits(DeviceProperties, require('./Service'))\n\nDeviceProperties.prototype.SetLEDState = function (options, callback) { this._request('SetLEDState', options, callback) }\nDeviceProperties.prototype.GetLEDState = function (options, callback) { this._request('GetLEDState', options, callback) }\nDeviceProperties.prototype.SetInvisible = function (options, callback) { this._request('SetInvisible', options, callback) }\nDeviceProperties.prototype.GetInvisible = function (options, callback) { this._request('GetInvisible', options, callback) }\nDeviceProperties.prototype.AddBondedZones = function (options, callback) { this._request('AddBondedZones', options, callback) }\nDeviceProperties.prototype.RemoveBondedZones = function (options, callback) { this._request('RemoveBondedZones', options, callback) }\nDeviceProperties.prototype.CreateStereoPair = function (options, callback) { this._request('CreateStereoPair', options, callback) }\nDeviceProperties.prototype.SeparateStereoPair = function (options, callback) { this._request('SeparateStereoPair', options, callback) }\nDeviceProperties.prototype.SetZoneAttributes = function (options, callback) { this._request('SetZoneAttributes', options, callback) }\nDeviceProperties.prototype.GetZoneAttributes = function (options, callback) { this._request('GetZoneAttributes', options, callback) }\nDeviceProperties.prototype.GetHouseholdID = function (options, callback) { this._request('GetHouseholdID', options, callback) }\nDeviceProperties.prototype.GetZoneInfo = function (options, callback) { this._request('GetZoneInfo', options, callback) }\nDeviceProperties.prototype.SetAutoplayLinkedZones = function (options, callback) { this._request('SetAutoplayLinkedZones', options, callback) }\nDeviceProperties.prototype.GetAutoplayLinkedZones = function (options, callback) { this._request('GetAutoplayLinkedZones', options, callback) }\nDeviceProperties.prototype.SetAutoplayRoomUUID = function (options, callback) { this._request('SetAutoplayRoomUUID', options, callback) }\nDeviceProperties.prototype.GetAutoplayRoomUUID = function (options, callback) { this._request('GetAutoplayRoomUUID', options, callback) }\nDeviceProperties.prototype.SetAutoplayVolume = function (options, callback) { this._request('SetAutoplayVolume', options, callback) }\nDeviceProperties.prototype.GetAutoplayVolume = function (options, callback) { this._request('GetAutoplayVolume', options, callback) }\nDeviceProperties.prototype.ImportSetting = function (options, callback) { this._request('ImportSetting', options, callback) }\nDeviceProperties.prototype.SetUseAutoplayVolume = function (options, callback) { this._request('SetUseAutoplayVolume', options, callback) }\nDeviceProperties.prototype.GetUseAutoplayVolume = function (options, callback) { this._request('GetUseAutoplayVolume', options, callback) }\nDeviceProperties.prototype.AddHTSatellite = function (options, callback) { this._request('AddHTSatellite', options, callback) }\nDeviceProperties.prototype.RemoveHTSatellite = function (options, callback) { this._request('RemoveHTSatellite', options, callback) }\n\nmodule.exports = DeviceProperties\n","/home/travis/build/npmtest/node-npmtest-sonos/node_modules/sonos/lib/services/GroupManagement.js":"var GroupManagement = function (host, port) {\n  this.name = 'GroupManagement'\n  this.host = host\n  this.port = port || 1400\n  this.controlURL = '/GroupManagement/Control'\n  this.eventSubURL = '/GroupManagement/Event'\n  this.SCPDURL = '/xml/GroupManagement1.xml'\n}\n\nrequire('util').inherits(GroupManagement, require('./Service'))\n\nGroupManagement.prototype.AddMember = function (options, callback) { this._request('AddMember', options, callback) }\nGroupManagement.prototype.RemoveMember = function (options, callback) { this._request('RemoveMember', options, callback) }\nGroupManagement.prototype.ReportTrackBufferingResult = function (options, callback) { this._request('ReportTrackBufferingResult', options, callback) }\n\nmodule.exports = GroupManagement\n","/home/travis/build/npmtest/node-npmtest-sonos/node_modules/sonos/lib/services/GroupRenderingControl.js":"var GroupRenderingControl = function (host, port) {\n  this.name = 'GroupRenderingControl'\n  this.host = host\n  this.port = port || 1400\n  this.controlURL = '/MediaRenderer/GroupRenderingControl/Control'\n  this.eventSubURL = '/MediaRenderer/GroupRenderingControl/Event'\n  this.SCPDURL = '/xml/GroupRenderingControl1.xml'\n}\n\nrequire('util').inherits(GroupRenderingControl, require('./Service'))\n\nmodule.exports = GroupRenderingControl\n","/home/travis/build/npmtest/node-npmtest-sonos/node_modules/sonos/lib/services/MusicServices.js":"var MusicServices = function (host, port) {\n  this.name = 'MusicServices'\n  this.host = host\n  this.port = port || 1400\n  this.controlURL = '/MusicServices/Control'\n  this.eventSubURL = '/MusicServices/Event'\n  this.SCPDURL = '/xml/MusicServices1.xml'\n}\n\nrequire('util').inherits(MusicServices, require('./Service'))\n\nMusicServices.prototype.GetSessionId = function (options, callback) { this._request('GetSessionId', options, callback) }\nMusicServices.prototype.ListAvailableServices = function (options, callback) { this._request('ListAvailableServices', options, callback) }\nMusicServices.prototype.UpdateAvailableServices = function (options, callback) { this._request('UpdateAvailableServices', options, callback) }\n\nmodule.exports = MusicServices\n","/home/travis/build/npmtest/node-npmtest-sonos/node_modules/sonos/lib/services/RenderingControl.js":"var RenderingControl = function (host, port) {\n  this.name = 'RenderingControl'\n  this.host = host\n  this.port = port || 1400\n  this.controlURL = '/MediaRenderer/RenderingControl/Control'\n  this.eventSubURL = '/MediaRenderer/RenderingControl/Event'\n  this.SCPDURL = '/xml/RenderingControl1.xml'\n}\n\nrequire('util').inherits(RenderingControl, require('./Service'))\n\nRenderingControl.prototype.GetVolume = function (options, callback) { this._request('GetVolume', options, callback) }\nRenderingControl.prototype.SetVolume = function (options, callback) { this._request('SetVolume', options, callback) }\n\nmodule.exports = RenderingControl\n","/home/travis/build/npmtest/node-npmtest-sonos/node_modules/sonos/lib/services/SystemProperties.js":"var SystemProperties = function (host, port) {\n  this.name = 'SystemProperties'\n  this.host = host\n  this.port = port || 1400\n  this.controlURL = '/SystemProperties/Control'\n  this.eventSubURL = '/SystemProperties/Event'\n  this.SCPDURL = '/xml/SystemProperties1.xml'\n}\n\nrequire('util').inherits(SystemProperties, require('./Service'))\n\nSystemProperties.prototype.SetString = function (options, callback) { this._request('SetString', options, callback) }\nSystemProperties.prototype.SetStringX = function (options, callback) { this._request('SetStringX', options, callback) }\nSystemProperties.prototype.GetString = function (options, callback) { this._request('GetString', options, callback) }\nSystemProperties.prototype.GetStringX = function (options, callback) { this._request('GetStringX', options, callback) }\nSystemProperties.prototype.Remove = function (options, callback) { this._request('Remove', options, callback) }\nSystemProperties.prototype.RemoveX = function (options, callback) { this._request('RemoveX', options, callback) }\nSystemProperties.prototype.GetWebCode = function (options, callback) { this._request('GetWebCode', options, callback) }\nSystemProperties.prototype.ProvisionTrialAccount = function (options, callback) { this._request('ProvisionTrialAccount', options, callback) }\nSystemProperties.prototype.ProvisionCredentialedTrialAccountX = function (options, callback) { this._request('ProvisionCredentialedTrialAccountX', options, callback) }\nSystemProperties.prototype.MigrateTrialAccountX = function (options, callback) { this._request('MigrateTrialAccountX', options, callback) }\nSystemProperties.prototype.AddAccountX = function (options, callback) { this._request('AddAccountX', options, callback) }\nSystemProperties.prototype.AddAccountWithCredentialsX = function (options, callback) { this._request('AddAccountWithCredentialsX', options, callback) }\nSystemProperties.prototype.RemoveAccount = function (options, callback) { this._request('RemoveAccount', options, callback) }\nSystemProperties.prototype.EditAccountPasswordX = function (options, callback) { this._request('EditAccountPasswordX', options, callback) }\nSystemProperties.prototype.EditAccountMd = function (options, callback) { this._request('EditAccountMd', options, callback) }\nSystemProperties.prototype.DoPostUpdateTasks = function (options, callback) { this._request('DoPostUpdateTasks', options, callback) }\nSystemProperties.prototype.ResetThirdPartyCredentials = function (options, callback) { this._request('ResetThirdPartyCredentials', options, callback) }\n\nmodule.exports = SystemProperties\n","/home/travis/build/npmtest/node-npmtest-sonos/node_modules/sonos/lib/services/ZoneGroupTopology.js":"var ZoneGroupTopology = function (host, port) {\n  this.name = 'ZoneGroupTopology'\n  this.host = host\n  this.port = port || 1400\n  this.controlURL = '/ZoneGroupTopology/Control'\n  this.eventSubURL = '/ZoneGroupTopology/Event'\n  this.SCPDURL = '/xml/ZoneGroupTopology1.xml'\n}\n\nrequire('util').inherits(ZoneGroupTopology, require('./Service'))\n\nZoneGroupTopology.prototype.CheckForUpdate = function (options, callback) { this._request('CheckForUpdate', options, callback) }\nZoneGroupTopology.prototype.BeginSoftwareUpdate = function (options, callback) { this._request('BeginSoftwareUpdate', options, callback) }\nZoneGroupTopology.prototype.ReportUnresponsiveDevice = function (options, callback) { this._request('ReportUnresponsiveDevice', options, callback) }\nZoneGroupTopology.prototype.ReportAlarmStartedRunning = function (options, callback) { this._request('ReportAlarmStartedRunning', options, callback) }\nZoneGroupTopology.prototype.SubmitDiagnostics = function (options, callback) { this._request('SubmitDiagnostics', options, callback) }\nZoneGroupTopology.prototype.RegisterMobileDevice = function (options, callback) { this._request('RegisterMobileDevice', options, callback) }\nZoneGroupTopology.prototype.GetZoneGroupAttributes = function (options, callback) { this._request('GetZoneGroupAttributes', options, callback) }\n\nmodule.exports = ZoneGroupTopology\n","/home/travis/build/npmtest/node-npmtest-sonos/node_modules/sonos/lib/events/listener.js":"var request = require('request')\nvar http = require('http')\nvar ip = require('ip')\nvar xml2js = require('xml2js')\nvar util = require('util')\nvar _ = require('underscore')\nvar events = require('events')\n\nvar Listener = function (device, options) {\n  this.device = device\n  this.parser = new xml2js.Parser()\n  this.services = {}\n  this.options = options || {'interface': 'public'} // If you want to use a different interface for listening, specify the name in options.interface\n}\n\nutil.inherits(Listener, events.EventEmitter)\n\nListener.prototype._startInternalServer = function (callback) {\n  this.port = 0\n  if ('port' in this.options) {\n    this.port = this.options.port\n  }\n\n  this.server = http.createServer(function (req, res) {\n    var buffer = ''\n    req.on('data', function (d) {\n      buffer += d\n    })\n\n    req.on('end', function () {\n      req.body = buffer\n      this._messageHandler(req, res)\n    }.bind(this))\n  }.bind(this)).listen(this.port, function () {\n    if (this.port === 0) {\n      this.port = this.server.address().port\n    }\n    callback(null, this.port)\n\n    setInterval(this._renewServices.bind(this), 1 * 1000)\n  }.bind(this))\n}\n\nListener.prototype._messageHandler = function (req, res) {\n  if (req.method.toUpperCase() === 'NOTIFY' && req.url.toLowerCase() === '/notify') {\n    if (!this.services[req.headers.sid]) {\n      return\n    }\n\n    var thisService = this.services[req.headers.sid]\n\n    var items = thisService.data || {}\n    this.parser.parseString(req.body.toString(), function (error, data) {\n      if (error) {\n        res.end(500)\n      }\n      _.each(data['e:propertyset']['e:property'], function (element) {\n        _.each(_.keys(element), function (key) {\n          items[key] = element[key][0]\n        })\n      })\n\n      this.emit('serviceEvent', thisService.endpoint, req.headers.sid, thisService.data)\n      res.end()\n    }.bind(this))\n  }\n}\n\nListener.prototype._renewServices = function () {\n  var sid\n\n  var now = new Date().getTime()\n\n  var renew = function (sid) {\n    return function (err, response) {\n      var serviceEndpoint = this.services[sid].endpoint\n\n      if (err || ((response.statusCode !== 200) && (response.statusCode !== 412))) {\n        this.emit('error', err || response.statusMessage, serviceEndpoint, sid)\n      } else if (response.statusCode === 412) { // restarted, this is why renewal is at most 300sec\n        delete this.services[sid]\n        this.addService(serviceEndpoint, function (err, sid) {\n          if (err) this.emit('error', err, serviceEndpoint, sid)\n        })\n      } else {\n        this.services[sid].renew = this.renew_at(response.headers.timeout)\n      }\n    }\n  }\n\n  for (sid in this.services) {\n    var thisService = this.services[sid]\n\n    if (now < thisService.renew) continue\n\n    var opt = {\n      url: 'http://' + this.device.host + ':' + this.device.port + thisService.endpoint,\n      method: 'SUBSCRIBE',\n      headers: {\n        SID: sid,\n        Timeout: 'Second-3600'\n      }\n    }\n\n    request(opt, renew(sid).bind(this))\n  }\n}\n\nListener.prototype.addService = function (serviceEndpoint, callback) {\n  if (!this.server) {\n    throw new Error('Service endpoints can only be added after listen() is called')\n  } else {\n    var opt = {\n      url: 'http://' + this.device.host + ':' + this.device.port + serviceEndpoint,\n      method: 'SUBSCRIBE',\n      headers: {\n        callback: '<http://' + ip.address(this.options.interface) + ':' + this.port + '/notify>',\n        NT: 'upnp:event',\n        Timeout: 'Second-3600'\n      }\n    }\n\n    request(opt, function (err, response) {\n      if (err || response.statusCode !== 200) {\n        if (!callback) return console.log(err || response.message || response.statusCode)\n        callback(err || response.statusMessage)\n      } else {\n        callback(null, response.headers.sid)\n\n        this.services[response.headers.sid] = {\n          renew: this.renew_at(response.headers.timeout),\n          endpoint: serviceEndpoint,\n          data: {}\n        }\n      }\n    }.bind(this))\n  }\n}\n\nListener.prototype.renew_at = function (timeout) {\n  var seconds\n\n  if ((!!timeout) && (timeout.indexOf('Second-') === 0)) timeout = timeout.substr(7)\n  seconds = (((!!timeout) && (!isNaN(timeout))) ? parseInt(timeout, 10) : 3600) - 15\n  if (seconds < 0) seconds = 15; else if (seconds > 300) seconds = 300\n\n  return (new Date().getTime() + (seconds * 1000))\n}\n\nListener.prototype.listen = function (callback) {\n  if (!this.server) {\n    this._startInternalServer(callback)\n  } else {\n    throw new Error('Service listener is already listening')\n  }\n}\n\nListener.prototype.removeService = function (sid, callback) {\n  if (!this.server) {\n    throw new Error('Service endpoints can only be modified after listen() is called')\n  } else if (!this.services[sid]) {\n    throw new Error('Service with sid ' + sid + ' is not registered')\n  } else {\n    var opt = {\n      url: 'http://' + this.device.host + ':' + this.device.port + this.services[sid].endpoint,\n      method: 'UNSUBSCRIBE',\n      headers: {\n        sid: sid\n      }\n    }\n\n    request(opt, function (err, response) {\n      if (err || response.statusCode !== 200) {\n        callback(err || response.statusCode)\n      } else {\n        callback(null, true)\n      }\n    })\n  }\n}\n\nmodule.exports = Listener\n"}